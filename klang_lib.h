#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>


/**
 * The root of the AST, containing all top-level declarations
 */
typedef struct klang_Program klang_Program;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/**
 * Will only quickly check the syntax and return any errors produced
 */
bool klang_check(void);

/**
 * Use to free any strings allocated by klang lib
 */
void klang_free_string(char *ptr);

/**
 * classic get errors function, returns the last error emitted by klang lib, if there are no errors returns a null pointer
 *
 * you have to free the returned string using `klang_free_string`
 */
char *klang_get_errors(void);

/**
 * Will parse the source code and produce a full ast
 */
struct klang_Program *klang_parse(void);

/**
 * Use to preprocess a klang file (expected as a c string `*char`) if the preprocessing fails the returned pointer will be null,
 * and the out_len will be 0
 *
 * # Warning
 * Since rust takes ownership of the string you pass in, you don't have to free it, but you do have to free the returned string
 */
char *klang_preprocess(char *input,
                       int *out_len);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus
